<?php

namespace catechesis\gui
{
    require_once(__DIR__ . '/../../core/Utils.php');

    use catechesis\Utils;
    use Exception;

    /**
     * Class Widget
     * @package catechesis
     *
     * Description:
     *  Abstract definition of a generic UI component containing PHP, HTML, CSS and JS reusable elements.
     */
    abstract class Widget
    {
        // (Note: typed properties are only allowed in PHP 7.4+, so types are commented in the meanwhile...)
        protected /*string*/    $_id;                             // Widget ID. Should also be used as HTML id when rendering the widget.
        protected /*array*/     $_css_includes = array();         // Array of strings with paths to CSS dependencies
        protected /*array*/     $_js_includes = array();          // Array of strings with paths to JS dependencies
        protected /*array*/     $_additional_classes = array();   // Add this classes to the generated HTML code
        protected /*string*/    $_inline_style;                   // Add this inline style property to the generated HTML code
        private /*string*/      $_path_prefix = "";               // Prefix to add to the path of every import resource (e.g. images)
        protected static /*int*/ $NEXT_AVAILABLE_ID = 0;

        /**
         * Widget constructor.
         *
         * The optional parameter $id is used as the ID for this widget in the rendered HTML code.
         * If no $id is provided, a randomly generated one is used.
         *
         * In your widget subclass constructor, call this and also the methods addCSSDepedency and addJSDependency
         * to declare all the dependencies of your widget.
         *
         * @param string|null $id
         */
        public function __construct(?string $id = null)
        {
            if (!isset($id))
            {
                try
                {
                    $id = "widget_" . Utils::secureRandomString(2);
                }
                catch (Exception $e)
                {
                    //Use an incremental counter instead
                    $id = "widget_" . self::$NEXT_AVAILABLE_ID++;
                }
            }

            $this->_id = $id;
        }


        /**
         * Returns the ID of this widget.
         * This ID is used both internally, by the widgets framework, and externally, in the rendered HTML code.
         * If an optional integer argument is passed, it is appended to the ID after an underscore. This is useful to
         * produce unique IDs to each part of the report.
         * @return string|null
         */
        public function getID(?int $part = null)
        {
            if(is_null($part))
                return $this->_id;
            else
                return $this->_id . "_" . $part;
        }


        /**
         * Adds a prefix to the path of every resource imported by this widget (e.g. images).
         * Allows the usage of the widgets framework in pages located in a directory other than the CatecheSis root.
         * NOTE The prefix for import CSS/JS files is handled by the WidgetManager.
         * @param string $prefix
         * @return $this
         */
        public function setPathPrefix(string $prefix)
        {
            $this->_path_prefix = $prefix;
            return $this;
        }


        /**
         * Returns the _path_prefix property of this widget.
         * For internal use, on widget's code, to correctly resolve its resource files.
         * @return string
         */
        protected function getPathPrefix()
        {
            return $this->_path_prefix;
        }

        /**
         * Adds the path of a CSS script to the list of dependencies of this widget.
         * This CSS path will be included in the HTML page where this widget is rendered.
         * @param string $path
         * @return $this
         */
        protected function addCSSDependency(string $path)
        {
            if(!in_array($path, $this->_css_includes))
                $this->_css_includes[] = $path;

            return $this;
        }


        /**
         * Adds the path of a JS script to the list of dependencies of this widget.
         * This JS path will be included in the HTML page where this widget is rendered.
         * @param string $path
         * @return $this
         */
        protected function addJSDependency(string $path)
        {
            if(!in_array($path, $this->_js_includes))
                $this->_js_includes[] = $path;

            return $this;
        }


        /**
         * Adds an HTML class to the code generated by this widget.
         * This allows the user of this widget to further customize it, e.g. with custom CSS applied to a custom class.
         * @param string $class
         */
        public function addCustomClass(string $class)
        {
            if(!in_array($class, $this->_additional_classes))
                $this->_additional_classes[] = $class;

            return $this;
        }


        /**
         * Adds a CSS inline style to the HTML code generated by this widget.
         * This allows the user of this widget to further customize it, e.g. by adding or overriding CSS styles.
         * @param string $cssStyle
         * @return $this
         */
        public function setInlineStyle(string $cssStyle)
        {
            $this->_inline_style = $cssStyle;
            return $this;
        }


        /**
         * Returns the array of CSS script paths needed by this widget.
         * This is used by the class WidgetManager to automatically manage includes.
         * @return mixed
         */
        public function getCSSDependencies()
        {
            return $this->_css_includes;
        }


        /**
         * Returns the array of JS script paths needed by this widget.
         * This is used by the class WidgetManager to automatically manage includes.
         * @return mixed
         */
        public function getJSDependencies()
        {
            return $this->_js_includes;
        }


        /**
         * Returns an array of strings, corresponding to the custom HTML classes added by the user to this widget instance.
         * @return mixed
         */
        public function getCustomClasses()
        {
            return $this->_additional_classes;
        }

        /**
         * Returns the list of custom HTML classes added by the user as a string ready to be appended to the widget's
         * class field.
         */
        public function getCustomClassesString()
        {
            $res = "";
            $customClasses = $this->getCustomClasses();
            if(is_array($customClasses))
            {
                foreach ($customClasses as $customClass)
                    $res .= " " . $customClass;
            }
            return $res;
        }



        /**
         * Returns a string corresponding to the custom inline CSS code added by the user to this widget intance.
         * @return mixed
         */
        public function getCustomInlineStyle()
        {
            return $this->_inline_style;
        }


        /**
         * Renders the CSS part of this widget.
         * Html 'link' tags to the previously declared CSS dependencies will be automatically generated by the WidgetManger.
         * Override this method in your widget subclass if you also would like to render CSS code inline.
         */
        public function renderCSS()
        {
        }


        /**
         * Renders the JS part of this widget.
         * Html 'script' tags to the previously declared JS dependencies will be automatically generated by the WidgetManger.
         * Override this method in your widget subclass if you also would like to render JS code inline.
         */
        public function renderJS()
        {
        }


        /**
         * Renders the HTML part of this widget.
         * Implement this method in your widget subclass.
         */
        abstract public function renderHTML();
    }

}